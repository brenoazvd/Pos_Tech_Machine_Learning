# -*- coding: utf-8 -*-
"""07_10_2024_deep_learning_ia_previsões

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GzRllqDR0GeTjzviHiMFNjo72ErvSPC3

## Previsão de Preços de Ações com Redes Neurais Recorrentes (LSTM)

#Breno Azevedo
"""

!pip install keras

!pip install scikit-learn

from keras.models import Sequential
from keras.layers import Dense, Dropout, LSTM
from sklearn.preprocessing import MinMaxScaler
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

base = pd.read_csv('/home/PETR4.csv')

base = base.dropna()

base_treinamento = base.iloc[:, 1:2].values

base_treinamento

normalizador = MinMaxScaler(feature_range=(0,1))
base_treinamento_normalizada = normalizador.fit_transform(base_treinamento)

base_treinamento_normalizada

previsores = []
preco_real = []
for i in range(90, len(base_treinamento_normalizada)):
    previsores.append(base_treinamento_normalizada[i-90:i, 0])
    preco_real.append(base_treinamento_normalizada[i, 0])

previsores

preco_real

previsores, preco_real = np.array(previsores), np.array(preco_real)

previsores = np.reshape(previsores,(previsores.shape[0], previsores.shape[1], 1))

previsores.shape[1]

#Criando a rede neuralo recorrente
regressor = Sequential()

regressor.add(LSTM(units = 100, return_sequences = True, input_shape = (previsores.shape[1], 1)))
regressor.add(Dropout(0.3))

regressor.add(LSTM(units = 50, return_sequences = True))
regressor.add(Dropout(0.3))

regressor.add(Dense(units = 1, activation = 'linear'))

regressor.compile(optimizer = 'rmsprop', loss = 'mean_squared_error',
                  metrics = ['mean_absolute_error'])

regressor.fit(previsores, preco_real, epochs = 100, batch_size = 32)

base_teste = pd.read_csv('/home/PETR4_teste.csv')
preco_real_teste = base_teste.iloc[:, 1:2].values

print(preco_real_teste)

base_completa = pd.concat((base['Open'], base_teste['Open']), axis = 0)

print("Base treinamento: {}\nBase teste: {}\nBase completa: {}".format(
    len(base_treinamento), len(base_teste), len(base_completa))
)

inicio = len(base_completa) - len(base_teste) - 90
print(inicio)

entradas = base_completa[inicio: ].values

entradas = entradas.reshape(-1, 1)

entradas = normalizador.transform(entradas)

X_teste = []
final = 90 +len(base_teste)
for i in range(90, final):
    X_teste.append(entradas[i-90:i, 0])
X_teste = np.array(X_teste)
X_teste = np.reshape(X_teste, (X_teste.shape[0], X_teste.shape[1], 1))

#efetua as previsões
previsoes = regressor.predict(X_teste)
#reconverte ("desnormaliza") os dados para R$
previsoes = normalizador.inverse_transform(previsoes)

print("Média previsões: R${:-f}".format(previsoes.mean()))
print("Média real: R${:.2f}".format(preco_real_teste.mean()))

plt.plot(preco_real_teste, color = 'red', label = 'Preço real')
plt.plot(previsoes, color = 'blue', label = 'Previsões')
plt.title('Previsão preço das ações PETR4')
plt.xlabel('Tempo (dias)')
plt.ylabel('Valor da ação (R$)')
plt.legend()
plt.show()
